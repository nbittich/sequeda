version: "3.9"
x-common-variables: &common-variables
  RUST_LOG: DEBUG
  SERVICE_CONFIG_VOLUME: /config
  SERVICE_HOST: 0.0.0.0
  SERVICE_PORT: 80
  MONGO_HOST: mongo
  MONGO_PORT: 27017
  MONGO_USERNAME: root
  MONGO_PASSWORD: root
  MONGO_ADMIN_DATABASE: admin
  MSG_CONS_HOST: broker
  MSG_CONS_PORT: 80
  MSG_CONS_PROTOCOL: ws
  MSG_CONS_TIMEOUT: 5000 # 5 seconds timeout, maybe must be increased to avoid connection closed
services:
  ####### MongoDB #######
  mongo:
    image: mongo
    networks:
      sequeda:
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - ./data/db:/data/db
  ####### Keycloak #######
  keycloak-postgresql:
    restart: always
    networks:
      sequeda:
    image: postgres:16
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
    volumes:
      - ./data/keycloak_postgresql:/var/lib/postgresql/data
  keycloak:
    restart: always
    image: nbittich/keycloak:24.0.2
    networks:
      sequeda:
    environment:
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_DB: "postgres"
      KC_DB_URL: "jdbc:postgresql://keycloak-postgresql:5432/keycloak"
      # KC_PROXY: edge
    command: start --optimized --proxy-headers xforwarded --http-port=80
    depends_on:
      - keycloak-postgresql
    user: root

  ####### Redis #######
  redis:
    image: redis:alpine
    restart: always
    networks:
      sequeda:
    command: redis-server  --appendonly yes
    volumes:
      - ./data/redis:/data
  ####### Gateway #######
  gateway:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_gateway
    volumes:
      - ./config/gateway:/config
    environment:
      <<: *common-variables
      OPENID_ENABLED: "true"
      APP_ROOT_URL: "https://api.somehost.org"
      OPENID_ISSUER_URL: "https://auth.somehost.org/realms/sequeda-auth"
      OPENID_CLIENT_ID: "sequeda-auth"
      OPENID_SCOPES: "roles, tenant, groups, email, profile" # user defined scopes: groups & tenant
      OPENID_CLIENT_SECRET: "secret"
      SESSION_REDIS_URL: "redis://redis"
    restart: "always"
    networks:
      sequeda:
  ####### service person  #######
  person:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_person
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service template  #######
  template:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_template
        WITH_CHROMIUM: "yes"
    environment:
      <<: *common-variables
      CHROMIUM_SANDBOXED: "false" # set to true when refactoring volume mapping / enable user in Dockerfile
    restart: "always"
    networks:
      sequeda:
  ####### service invoice  #######
  invoice:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_invoice
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service product  #######
  product:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_product
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service org_position  #######
  org-position:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_org_position
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service orgs  #######
  orgs:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_orgs
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service org_member  #######
  org-members:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_org_member
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service org_customer  #######
  org-customers:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_org_customer
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service geo  #######
  geo-entities:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_geo_service
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service uploads  #######
  uploads:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_file_upload
        WITH_LIBREOFFICE: "yes"
    volumes:
      - ./data/share:/share
    environment:
      <<: *common-variables
      BODY_SIZE_LIMIT: 536870912 # 512Mb
      SHARE_DRIVE_PATH: "/share"
    restart: "always"
    networks:
      sequeda:
  ####### service auditlog  #######
  auditlog:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_audit_log
    volumes:
      - ./config/audit-log:/config
    environment: *common-variables
    restart: "always"
    networks:
      sequeda:
  ####### service migrations  #######
  migrations:
    build:
      context: ../migrations/.
    volumes:
      - ./config/migrations:/migrations
    environment: *common-variables
    restart: "no"
    networks:
      sequeda:
  ####### service broker  #######
  broker:
    build:
      context: ../
      args:
        CRATE_NAME: sequeda_message_broker
    volumes:
      - ./data/broker:/broker
    environment:
      PUB_HOST: 0.0.0.0
      PUB_PORT: 80
      PUB_PERSISTENT_DIR: "/broker"
      PUB_INTERVAL_CONSUMER: 20
      PUB_INTERVAL_SYNC_FILE: 100
    restart: "always"
    networks:
      sequeda:

networks:
  sequeda:
